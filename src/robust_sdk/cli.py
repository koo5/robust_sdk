import click

# https://docs.python.org/3/library/xml.etree.elementtree.html
import xml.etree.ElementTree as xmltree
from pymaybe import maybe
import rdflib
from rdflib.term import Literal, BNode, Identifier
from datetime import datetime
from robust_sdk.utils import *



class InputException(Exception):
	pass




V1 = rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/")
R = 	rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/request#")
E = 	rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/excel#")
ER = rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/excel_request#")
BS = rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/bank_statement#")
IC = rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/calcs/ic#")
IC_UI = rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/calcs/ic/ui#")
AV = rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/action_verbs#")
UV = rdflib.Namespace("'https://rdf.lodgeit.net.au/v1/unit_values#")




#
g = rdflib.Graph()
#
rg = rdflib.Graph(identifier = R.request_graph)


all_request_sheets = []

def add_sheet(sheet_type: Identifier, name: str, record: Identifier):
	sheet_instance = BNode()#'sheet_instance')
	rg.add((sheet_instance, E.sheet_instance_has_sheet_type, sheet_type))
	rg.add((sheet_instance, E.sheet_instance_has_sheet_name, Literal(name)))
	rg.add((sheet_instance, E.sheet_instance_has_sheet_data, record))
	all_request_sheets.append(sheet_instance)

def date_literal(date_str: str):
	return Literal(datetime.strptime(date_str, '%Y-%m-%d'))



CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
@click.group(context_settings=CONTEXT_SETTINGS)
@click.option('--debug/--no-debug', default=False)
def cli(debug):
    click.echo(f"Debug mode is {'on' if debug else 'off'}")

@cli.command()
@click.argument('xml', type=click.File('r'))
def xml2rdf(xml, destdir='.'):
	"""
	Load the legacy IC XML file and produce robust IC RDF.
	XML - path of XML file.
	"""
	xml_request = xmltree.parse(xml).getroot().find('balanceSheetRequest')
	if xml_request is None:
		raise InputException('Not a valid IC XML file')

	defaultCurrency = xml_request.find('defaultCurrency').text

	add_report_details_sheet(xml_request)
	add_bank_statement_sheets(xml_request)
	add_unit_values_sheet(xml_request)
	add_action_verbs_sheet(xml_request)

	rg.add((ER.request, E.has_sheet_instances, AssertList(rg, all_request_sheets)))
	g.add((ER.request, R.client_version, Literal("3")))

	# i think this is guaranteed not to produce collisions of bnodes names, since all bnodes are generated by calling BNode(), which uses uuid4()
	result_graph = g + rg
	result_file = destdir + '/result.trig'
	result_graph.serialize(result_file, format='trig')

	print()
	print('vvvv')
	print(result_graph.serialize(format='turtle'))
	print('^^^^')
	print()
	return result_file


reportCurrency = None
endDate = None




def add_report_details_sheet(r):
	global endDate
	report_details = BNode()#'bank_statement')
	g.add((report_details, RDF.type, BS.report_details))

	g.add((report_details, IC.cost_or_market,			 AssertValue(g, IC.market)))
	g.add((report_details, IC.currency,					 AssertLiteralValue(g, r.find('reportCurrency').find('unitType').text)))
	g.add((report_details, IC['from'],					 AssertValue(g, date_literal(r.find('startDate').text))))
	endDate = r.find('endDate').text
	g.add((report_details, IC['to'],						 AssertValue(g, date_literal(endDate))))
	g.add((report_details, IC.pricing_method,			 AssertValue(g, IC.lifo)))

	taxonomy1 = BNode(); g.add((taxonomy1, V1['account_taxonomies#url'],  V1['account_taxonomies#base']))
	taxonomy2 = BNode(); g.add((taxonomy2, V1['account_taxonomies#url'],  V1['account_taxonomies#investments']))
	#taxonomy3 = BNode(); g.add((taxonomy3, V1['account_taxonomies#url'],  V1['account_taxonomies#livestock']))
	account_taxonomies = [
		AssertValue(g, taxonomy1),
		AssertValue(g, taxonomy2),
		#AssertValue(g, taxonomy3)
	]
	g.add((report_details, IC_UI.account_taxonomies,		 AssertListValue(g, account_taxonomies)))
	add_sheet(IC_UI.report_details_sheet, 'report_details', report_details)




def add_bank_statement_sheets(r):

	bst = r.find('bankStatement')
	if bst is None:
		raise InputException('Not a valid IC XML file')

	for accd in bst.findall("accountDetails"):
		xml_transactions = accd.find('transactions')
		rdf_transactions = []
		for t in xml_transactions:

			transdesc = maybe(t.find('transdesc')).text
			transdate = t.find('transdate').text
			debit = maybe(t.find('debit')).text
			credit = maybe(t.find('credit')).text
			unit = maybe(t.find('unit')).text
			unitType = maybe(t.find('unitType')).text

			print(transdesc, transdate, debit, credit, unit, unitType)

			# add transaction to RDF graph
			tx = BNode()#'tx')
			rdf_transactions.append(tx)
			g.add((tx, R.transaction_has_description, Literal(transdesc)))
			g.add((tx, R.transaction_has_date, Literal(transdate)))
			g.add((tx, R.transaction_has_debit, Literal(debit)))
			g.add((tx, R.transaction_has_credit, Literal(credit)))
			g.add((tx, R.transaction_has_unit, Literal(unit)))
			g.add((tx, R.transaction_has_unit_type, Literal(unitType)))

		accountNo = accd.find('accountNo').text
		accountName = accd.find('accountName').text
		bankID = accd.find('bankID').text
		currency = accd.find('currency').text
		print(accountNo, accountName, bankID, currency)

		bs = BNode()#'bank_statement')
		g.add((bs, RDF.type, BS.bank_statement))
		g.add((bs, BS.account_currency, AssertLiteralValue(g, currency)))
		g.add((bs, BS.account_name, AssertLiteralValue(g, accountName)))
		g.add((bs, BS.account_number, AssertLiteralValue(g, accountNo)))
		g.add((bs, BS.bank_id, AssertLiteralValue(g, bankID)))
		g.add((bs, BS.items, AssertListValue(g, rdf_transactions)))

		add_sheet(IC_UI.bank_statement_sheet, accountName, bs)




def add_unit_values_sheet(xml_request):
	unit_values = []
	for xml_unit_value in xml_request.find('unitValues').findall('unitValue'):
		v = BNode()#'unit_value')
		unit_values.append(v)
		unitType = xml_unit_value.find('unitType').text
		unitValue = xml_unit_value.find('unitValue').text
		unitValueDate = maybe(xml_unit_value.find('unitValueDate')).text
		if unitValueDate in ['', None]:
			unitValueDate = endDate
		unitValueCurrency = xml_unit_value.find('unitValueCurrency').text
		if unitValueCurrency == '':
			unitValueCurrency = reportCurrency
		print(unitType, unitValue, unitValueDate)

		#g.add((v, RDF.type, IC.unit_value))
		g.add((v, UV.name, AssertLiteralValue(g, unitType)))
		g.add((v, UV.value, AssertLiteralValue(g, unitValue)))
		g.add((v, UV.date, AssertValue(g, date_literal(unitValueDate))))
		g.add((v, UV.currency, AssertLiteralValue(g, unitValueCurrency)))

	add_sheet(IC_UI.unit_values_sheet, 'unit_values', AssertListValue(g, unit_values))




def add_action_verbs_sheet(xml_request):
	action_verbs = []
	for xml_verb in xml_request.find('actionTaxonomy').findall('action'):
		v = BNode()#'action')
		action_verbs.append(v)
		id = xml_verb.find('id').text
		exchangeAccount = xml_verb.find('exchangeAccount').text
		tradingAccount = xml_verb.find('tradingAccount').text
		description = xml_verb.find('description').text

                 #g.add((v, RDF.type, IC.action_verb))
		g.add((v, AV.name, AssertLiteralValue(g, id)))
		g.add((v, AV.description, AssertLiteralValue(g, description)))
		g.add((v, AV.exchanged_account, AssertLiteralValue(g, exchangeAccount)))
		g.add((v, AV.trading_account, AssertLiteralValue(g, tradingAccount)))


	add_sheet(IC_UI.action_verbs_sheet, 'action_verbs', AssertListValue(g, action_verbs))







if __name__ == '__main__':
	cli()



#g.add((rdflib.URIRef('http://example.org/'), rdflib.RDF.type, rdflib.RDFS.Class))


